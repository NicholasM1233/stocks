{"version":3,"sources":["components/StockForm.js","api/iextrading.js","components/findStock.js","components/StockFinder.js","components/StockDisplay.js","layouts/StockPriceGrabber.js","components/StockList.js","components/UpdateStockList.js","layouts/StockTracker.js","layouts/Header.js","layouts/Home.js","history.js","components/App.js","index.js"],"names":["FormDiv","styled","div","FormInput","input","StockForm","props","useState","fieldInfo","setFieldInfo","formState","setFormState","onSubmit","e","preventDefault","className","length","formErrorClass","onBlur","fieldErrorClass","onChange","target","value","placeholder","required","errorHeader","errorMessage","type","buttonText","axios","create","baseURL","headers","fetchStockData","code","a","iextrading","get","result","data","updateStocksData","stocks","promiseArray","map","stock","symbol","response","Promise","all","updatedStocks","StockFinder","handleChange","stockCode","setStockCode","useEffect","fetchedStockData","newCode","StockSymbol","h3","StockPrice","h4","StockDisplay","companyName","latestPrice","PriceGrabberDiv","StyledIcon","PriceGrabCard","CardTop","CardBottom","StockPriceGrabber","stockState","setStockData","handleChangeCallback","useCallback","ListOfStocks","StockList","key","uniqid","UpdateStockList","handleSubmit","newStocks","setStocks","onClick","StockTracker","stockList","setStockList","handleSubmitCallback","Header","to","HomeDiv","HomeButton","Home","createBrowserHistory","App","history","path","exact","component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.4420f58c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\n// the stockForm that takes the inputted field of the form to the state, and passes it onSubmit.\n\n\n\nconst FormDiv = styled.div`\n  padding: 10px 0;\n  \n  \n  display: flex; \n  justify-content: center; \n  flex-flow: column nowrap; \n`;\n\nconst FormInput = styled.input `\n background: hsl(220, 12%, 95%) !important;\n &:focus {\n   border-color: green !important; \n }\n`\n// The StockForm is responsible for allowing a user to enter in information, and pass it to the parent component via callback.\nconst StockForm = props => {\n  // \n  const [fieldInfo, setFieldInfo] = useState();\n  const [formState, setFormState] = useState();\n// the handleChange callback responsible for rendering inputted form text back to the user.\n  const handleChange = e => {\n    setFieldInfo(e.target.value);\n  };\n\n  // the handleSubmit callback is invoked with formData, and passes it to the parent via the parents onSubmit callback.\n  const handleSubmit = e => {\n    props.onSubmit(fieldInfo);\n    e.preventDefault();\n  };\n\n  // Rendering Form utilizing semantic UI classNames if text is inputted or not. \n  const formErrorClass = () => {\n    let className = \"ui form\";\n    if (formState === \"clicked\") {\n      if (fieldInfo.length === 0) {\n        className = \"ui form error\";\n        return className;\n      }\n    }\n    return className;\n  };\n  // prompting the user on the correct actions to take to fix the error. \n  const fieldErrorClass = () => {\n    let className = \"field\";\n    if (formState === \"clicked\") {\n      if (fieldInfo.length === 0) {\n        className = \"field error\";\n        return className;\n      }\n    }\n\n    return className;\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className={formErrorClass()}\n      onBlur={() => setFormState(\"clicked\")}\n    >\n      <div>\n        <FormDiv className={fieldErrorClass()}>\n          <FormInput\n            onChange={handleChange}\n            placeholder={props.placeholder}\n            required={true}\n            value={fieldInfo}\n          />\n          <div className=\"ui error message\">\n            <div className=\"header\">{props.errorHeader}</div>\n            <p>{props.errorMessage}</p>\n          </div>\n        </FormDiv>\n      </div>\n\n      <FormDiv>\n        <input\n          className=\"ui button green\"\n          type=\"submit\"\n          value={props.buttonText}\n        />\n      </FormDiv>\n    </form>\n  );\n};\n\nexport default StockForm;\n","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: \"https://sandbox.iexapis.com\",\n    headers:{ \n        \n        \n    }\n\n   \n    \n});","import iextrading from \"../api/iextrading\";\n\n\n// Fetching functions that grab information from IEXTrading. \n\n\n\n\n// accepts a stock code and returns with the correspond stock quote from iextrading.\nexport const fetchStockData = async code => {\n  const result = await iextrading.get(\n    `/stable/stock/${code}/quote?token=Tpk_1b4edfd075444fd28f41baa8dec27c89`\n  );\n  return result.data;\n};\n\n// takes an array of stocks and returns with an array of updated stocks!\nexport async function updateStocksData(stocks) {\n  const promiseArray = stocks.map(async stock => {\n    const response = await fetchStockData(stock.symbol);\n    return response;\n  });\n  const updatedStocks = await Promise.all(promiseArray);\n  return updatedStocks;\n}\n","import React, { useState, useEffect } from \"react\";\nimport StockForm from \"./StockForm\";\nimport { fetchStockData } from \"../components/findStock\";\n// the StockFinder component responsible for accepting a stockCode and rendering the price of the stock to the screen.\n\nconst StockFinder = ({ handleChange, buttonText }) => {\n  const [stockCode, setStockCode] = useState(null);\n\n  // the handleSubmit callback passed down to the StockForm as a prop. Passes the stockCode from the StockForm to local state.\n  const handleSubmit = newCode => {\n    setStockCode(newCode);\n  };\n\n  // Whenever a stockCode is set\n  useEffect(() => {\n    // conditional if there is no stockCode do nothing.\n    if (!stockCode) {\n      return;\n    }\n    // if there is a stock code, \n    (async function() {\n      //fetch the stock object using the stockCode\n      let fetchedStockData = await fetchStockData(stockCode);\n      // invoke the parent handleChange callback with the fetched stock object\n      handleChange(fetchedStockData);\n    })();\n  }, [stockCode]);\n\n  return (\n    <div>\n      <StockForm\n        onSubmit={handleSubmit}\n        placeholder=\"Stock Code\"\n        errorMessage=\"You must provide a stock code to begin tracking!\"\n        errorHeader=\"No Stock Code Provided\"\n        buttonText={buttonText}\n      />\n    </div>\n  );\n};\nexport default StockFinder;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StockSymbol = styled.h3``;\n\nconst StockPrice = styled.h4`\n  color: green;\n`;\n\nconst StockDisplay = ({ stock }) => {\n  if (stock.length === 0) {\n    return (\n      <div>\n        <StockSymbol>Stock:</StockSymbol>\n        <StockPrice>Share Price:</StockPrice>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"\">\n      <div>\n        <StockSymbol>Stock: {stock.companyName}</StockSymbol>\n        <StockPrice>\n          Share Price: <strong>${stock.latestPrice}</strong>\n        </StockPrice>\n      </div>\n    </div>\n  );\n};\n\nexport default StockDisplay;\n","import React, { useState, useCallback} from \"react\";\nimport StockFinder from \"../components/StockFinder\";\nimport StockDisplay from \"../components/StockDisplay\";\nimport styled from \"styled-components\";\n\n// Steps to get the stock display functioning.\n\n//1: Establish a state.\n//2: Pass the state up to StockPriceGrabber utilizing a callback\n//3: Send that data down to the stock display as a prop.\n//4: Map over the data in the display function.\n\nconst PriceGrabberDiv = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n  padding-top: 25px;\n`;\n\nconst StyledIcon = styled.div`\n  color: green;\n  padding-bottom: 10px;\n`;\nconst PriceGrabCard = styled.div`\n  box-shadow: 0 4px 6px 0 hsla(0, 0%, 0%, 0.2);\n\n  width: 600px;\n`;\n\nconst CardTop = styled.div`\n  background-color: hsl(220, 12%, 95%);\n  border-top: 3px solid green;\n  padding: 3% 3%;\n`;\nconst CardBottom = styled.div`\n  padding: 3% 3%;\n`;\n\n\n// The StockPriceGrabber component is responsible for allowing a user to find the price of a stock given a stock symbol\nconst StockPriceGrabber = () => {\n  // the local state consisting of a single stock object within an arrat\n  const [stockState, setStockData] = useState([]);\n\n\n  // The callback passed down to the StockFinder component sets our local state with a fetched Stock from IEXTrading\n  const handleChangeCallback  = useCallback(stock => setStockData(stock), []);\n\n  return (\n    <PriceGrabberDiv className=\"container\">\n      <h2>Lookup stocks by their unique symbols!</h2>\n      <StyledIcon>\n        <i className=\"fad fa-badge-dollar fa-4x\"></i>\n      </StyledIcon>\n      <PriceGrabCard>\n        <CardTop>\n          {/* The StockDisplay components single purpose is to display the stock passed down as a prop */}\n          <StockDisplay stock={stockState} />\n        </CardTop>\n        <CardBottom>\n          {/* The StockFinder components single purpose is to fetch a stock given a symbol and invoke the callback with the API response */}\n          <StockFinder handleChange={handleChangeCallback} />\n        </CardBottom>\n      </PriceGrabCard>\n    </PriceGrabberDiv>\n  );\n};\n\nexport default StockPriceGrabber;\n","import React from \"react\";\nimport uniqid from \"uniqid\";\nimport styled from \"styled-components\";\n\n// styling from styled-components\nconst ListOfStocks = styled.div`\n  display: flex; \n  flex-flow: column nowrap; \n  justify-content: center;\n \n`\n\n// The StockList component which receives an array of Stocks to render from parent StockTracker\nconst StockList = ({ stocks }) => {\n  return (\n    <ListOfStocks>\n      <div className=\"ui list\">\n      {/* For all of the stocks sent down by our parent, render a list item with the company name, and the latestPrice --> */}\n        {stocks.map(stock => (\n          <div className=\"item\" key={uniqid()}>\n            <div className=\"header\">{stock.companyName}</div>$\n            {stock.latestPrice}\n          </div>\n        ))}\n      </div>\n    </ListOfStocks>\n  );\n};\n\nexport default StockList;\n\n","import React, { useEffect, useState } from \"react\";\nimport  {updateStocksData} from \"../components/findStock\";\n\n\n// This component is for the button that updates the stocks currently stored in the StockTracer, which are rendered by the StockList.\nconst UpdateStockList = ({handleSubmit, stocks}) => {\n  const [newStocks, setStocks] = useState([]);\n\n  // The onSubmit which is triggered when the button is clicked. \n  const onSubmit = () => {\n    // perform the async request to iextrading API\n    (async function() { \n      // the imported \"updateStocksData\" function returns an updated array of stock information, here it is invoked with the prop stocks from StockTracker\n      let updatedStocks = await updateStocksData(stocks);\n      // set our local state with the array of updated stocks\n      setStocks(updatedStocks);\n    })();\n    \n  };\n\n  // useEffect is triggered when our local state is updated\n  useEffect(() => {\n    // Run the callback \"handleSubmit\" sent down as prop from parent StockTracker \n    // Callback sets the parent state with the updatedStocks.\n    handleSubmit(newStocks);\n  }, [newStocks, handleSubmit]);\n\n  // Component is a button with the onSubmit bound to the onClick. \n  return (\n    <div className=\"ui container\">\n      <button className =\"ui button primary\"type=\"submit\" onClick={onSubmit}>\n        Update Stocks\n      </button>\n    </div>\n  );\n};\nexport default UpdateStockList;\n","import React, { useState, useCallback } from \"react\";\nimport StockFinder from \"../components/StockFinder\";\nimport StockList from \"../components/StockList\";\nimport UpdateStockList from \"../components/UpdateStockList\";\n\n// The StockTracker component is responsible for allowing a user to add a stock from IexTracking to a displayed UL, and update the stocks within the UL\n// to the latest price information.\n\nconst StockTracker = () => {\n  // The local state comprising of an Array of Stocks\n  const [stockList, setStockList] = useState([]);\n\n  // The Callback passed down to the StockFinder component adds a grabbed stock to the end of the stockList array.\n  const handleChangeCallback = useCallback(\n    stock => setStockList([...stockList, stock]),\n    [stockList]\n  );\n\n  // The Callback passed down to the UpdateStockList component replaces the current array of stocks with the updated stocks.\n  const handleSubmitCallback = useCallback(stocks => setStockList(stocks), []);\n\n  return (\n    <div>\n      <h2>Track stocks by their unique symbols!</h2>\n      {/* The StockList components single purpose is to display the list of stocks we send down as a prop */}\n      <StockList stocks={stockList} />\n      {/* The StockFinder components single purpose is to fetch a stock given a symbol and invoke the callback with the API response */}\n      <StockFinder\n        handleChange={handleChangeCallback}\n        buttonText=\"Add Stock to List\"\n      />\n      {/* The UpdateStockList components single purpose is to re-fetch all of the stocks when given an array of stocks, and be invoke the callback with the updated stocks */}\n      <UpdateStockList stocks={stockList} handleSubmit={handleSubmitCallback} />\n    </div>\n  );\n};\n\nexport default StockTracker;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => {\n  return (\n    <div className=\"ui secondary pointing menu\">\n      <Link to=\"/\" className=\"item\">\n        Home\n      </Link>\n      <div className=\"right menu\">\n        <Link to=\"/stocks/list\" className=\"item\">\n          Track\n        </Link>\n        <Link to=\"/stocks/price\" className=\"item\">\n          Lookup\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst HomeDiv = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: flex;\n  align-items: center;\n`;\nconst HomeButton = styled.div`\n  padding: 10px 0;\n`;\n\nconst Home = () => {\n  return (\n    <HomeDiv>\n      <h2>Track or Lookup Stocks!</h2>\n      <HomeButton>\n        <Link to=\"/stocks/list\">\n          <button className=\"ui button teal\">Track Stocks</button>\n        </Link>\n      </HomeButton>\n      <HomeButton>\n        <Link to=\"/stocks/price\">\n          <button className=\"ui button green\">Lookup a Stock</button>\n        </Link>\n      </HomeButton>\n    </HomeDiv>\n  );\n};\n\nexport default Home;\n","import { createBrowserHistory } from 'history';  \nexport default createBrowserHistory();","import React from \"react\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport StockPriceGrabber from \"../layouts/StockPriceGrabber\";\nimport StockTracker from \"../layouts/StockTracker\";\nimport Header from \"../layouts/Header\";\nimport Home from \"../layouts/Home\";\n\nimport history from \"../history\";\n\nconst App = () => {\n  return (\n    <div className=\"ui container\">\n      <Router history={history}>\n        <div>\n          <Header />\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/stocks/price\" exact component={StockPriceGrabber} />\n            <Route path=\"/stocks/list\" exact component={StockTracker} />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App/>, document.querySelector('#root'));"],"sourceRoot":""}